
TFT屏320*240
整个靶子的实际直径60cm-->600mm-->比例3:1，直径200像素，实际每3mm对应1像素-->50mm对应16.7个像素即17个像素
//-->这样最外环与相隔内环相差0.6个像素误差，到最内层就是3个像素点误差，考虑到最内层有约34个像素点
17,17-------17,221
 |             |
 |             |
 |             |
 |             |
221,17------221,221
//还有线宽1mm的误差(貌似不太算)人眼的识别力，该误差可忽略不计。
//字体大小32*32
x1,y1----------x2,y2
 |               |
 |               |
 |               |
 |               |
x3,y3----------x4,y4
先横向一行一行扫描第一次找出x1,y1--x2,y2<---考虑极限情况，如果扫描到了，则再扫一行加起来算
扫描时加上50，排除最外圆的黑线可能带来的干扰
接下来列向下至少50个像素点后再扫描
得出x3,y3--x4,y4
然后判断当前状态是否摆正-->x1,x3相差是否3个像素点之内，y1,y2相差是否3个像素点之内
如果摆正，则当前坐标确定，否则继续拍摄直到摆正<----可设立标志位显示当前状态
小黑块有18mm
摆正后以x1,y1作为基点，算(x2-x1)/600<---比例<---先L=x2-x1<---显示200/600
接下来扫描激光点把所有在红色区域x,y求平均地x,y
在靶上显示的点应为x--->17+(x-x1)/L*204
                 y--->17+(y-y1)/(y3-y1)*204
扫描下来没有红点，则置x,y为0<---不显示

红色边缘50000左右，中心64000左右
根据坐标算靶数

周期20ms,1.5ms高电平正中，2ms转45度，500us 45度，理论上加1us加0.09度
                                                        5us  0.45度
                                                       10us  0.9度

上面舵机，1ms右转，2ms左转<---PB6
下面电机，1ms上转，2ms下转<---PB7

自动打环数，只左右旋转

重改红点识别算法，将所有亮点为65535

/****************************************************************************************************
//=======================================液晶屏数据线接线==========================================//
//DB0       接PD14 
//DB1       接PD15 
//DB2       接PD0 
//DB3       接PD1 
//DB4~DB12  依次接PE7~PE15
//DB13      接PD8 
//DB14      接PD9
//DB15      接PD10  
//=======================================液晶屏控制线接线==========================================//
//LCD_CS	接PG12	//片选信号
//LCD_RS	接PG0	//寄存器/数据选择信号
//LCD_WR	接PD5	//写信号
//LCD_RD	接PD4	//读信号
//LCD_RST	接PE5	//复位信号
//LCD_LED	接PB0	//背光控制信号(高电平点亮)
//=========================================触摸屏触接线=========================================//
//不使用触摸或者模块本身不带触摸，则可不连接
//MO(MISO)	接PF8	//SPI总线输出
//MI(MOSI)	接PF9	//SPI总线输入
//PEN		接PF10	//触摸屏中断信号
//TCS		接PB2	//触摸IC片选
//CLK		接PB1	//SPI总线时钟
**************************************************************************************************/
//摄像头接线
//SIOC          接PD3
//SIOD          接PG13
//VSYNC         接PA8
//D0~D7         接PC0~PC7
//RST           正常拉高PE0
//PWDN          正常拉低PE1'
//STR(闪光灯）   空脚
//RCK           接PB4
//WR            接PB3
//OE            接PG15
//WRST          接PD6
//RRST          接PG14
//无线收发模块接线
//SPI1_SCK      接PA5     PB13
//SPI1_MISO     接PA6     PB14
//SPI1_MOSI     接PA7     PB15
//INT           接PC5 
//CE            接PA4     PB12
//CS            接PC4
**************************************************************************************************/
PWM波生成
准备使用TIMER4的通道1，通道2
TIMER4_CH1      PB6
TIMER4_CH1      PB7

准备改为PA10和PA11
TIMER1_CH3      PA10
TIMER1_CH4      PA11

**************************************************************************************************/
用PF0~PF7作为键盘的扫描键盘的IO口
PF0~PF3输出,PF4~PF7输入

           上面        下面
正中心     1440        1280
九环正上   1440        1255
八环正上   1440        1245

**************************************************************************************************/
初定PA12为控制激光笔的IO口

**************************************************************************************************/
键盘模拟图
10环(上)  9环(下)   8环(左)   7环(右)
6环       5环         上       下   
左        右          射击     常亮  
                     自动      手动

**************************************************************************************************/
拟采用两对无线收发模块，实现信息的双向传输。
德飞莱那块板子置于摄像头处，板载的NRF24L01接口用于发送数据--->即红点的坐标
                          另一块板载的NRF24L01接口用于接收数据
两块上的接口均为
//SPI1_SCK      接PA5     
//SPI1_MISO     接PA6     
//SPI1_MOSI     接PA7     
//INT           接PC5 
//CE            接PA4    
//CS            接PC4
发送接收的数据应为6位字符即tmp0~5,而最后一位为标识符0，所以定义数组tmp[7]




德飞莱连线NRF24L01用于接收数据<---接收按键的信息
      另一块接线接收数据
原来战舰板用的是SPI2，我之前把它改为SPI1,那我现在不用改了
//无线收发模块接线
//SPI1_SCK      接PB13
//SPI1_MISO     接PB14<---SPI初始化
//SPI1_MOSI     接PB15
//INT           接PG8
//CE            接PG6
//CS            接PG7



 
























	